#!/usr/bin/python

# Vcontrol log analyzer by Linus Larsson (linus.larsson@gmail.com)
# 

import sys
import inspect
import os
import time
import sqlite3

def usage():
	print "vcontrol --import [PATH_TO_VCONTROL]                import data from vbar control"
	print "vcontrol --list                                     List batteries and models"
	print "vcontrol --extract [model=id]                       Export data" 
	print "                   [battery=id]" 
	print "                   [start=YYYY-MM-DD]"
	print "                   [end=YYYY-MM-DD]"

def db():
	if db.conn == None:
		db.conn = sqlite3.connect(os.path.join(os.path.expanduser("~"), '.vcontrol.db'))

	# Create tables if necesarry
	cur = db.conn.cursor()
	cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='battery'")
	rs = cur.fetchone()
	if rs == None:
		print "Creating database table battery";
		cur = db.conn.cursor()
		cur.execute("CREATE TABLE battery (id INTEGER PRIMARY KEY autoincrement NOT NULL, name varchar(255))")
		db.conn.commit();

	cur = db.conn.cursor()
	cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='model'")
	rs = cur.fetchone()
	if rs == None:
		print "Creating database table model";
		cur = db.conn.cursor()
		cur.execute("CREATE TABLE model (id INTEGER PRIMARY KEY autoincrement NOT NULL, name varchar(255))")
		db.conn.commit();

	cur = db.conn.cursor()
	cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='batterylog'")
	rs = cur.fetchone()
	if rs == None:
		print "Creating database table batterylog";
		cur = db.conn.cursor()
		cur.execute("CREATE TABLE batterylog (id INTEGER PRIMARY KEY autoincrement, date datetime, batteryid INTEGER, modelid INTEGER, duration INTEGER, capacity INTEGER, used INTEGER, minvoltage NUMERIC(3,1), maxampere NUMERIC(3,1), uid NUMERIC(3,1))");
		db.conn.commit();

	cur = db.conn.cursor()
	cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='variable'")
	rs = cur.fetchone()
	if rs == None:
		print "Creating database table variable";
		cur = db.conn.cursor()
		cur.execute("CREATE TABLE variable (name VARCHAR(255) PRIMARY KEY, value TEXT)");
		db.conn.commit();

	return db.conn
db.conn = None

def get_battery_id(name):
	cur = db().cursor()
	cur.execute('SELECT id FROM battery WHERE name=?', [name])
	rs = cur.fetchone()
	if rs != None:
		id = rs[0]
	else:
		cur = db().cursor()
		cur.execute('INSERT INTO battery (name) VALUES (?)', [name])
		id = cur.lastrowid;
		db().commit()
	return id;

def get_model_id(name):
	cur = db().cursor()
	cur.execute('SELECT id FROM model WHERE name=?', [name])
	rs = cur.fetchone()
	if rs != None:
		id = rs[0]
	else:
		cur = db().cursor()
		cur.execute('INSERT INTO model (name) VALUES (?)', [name])
		id = cur.lastrowid;
		db().commit()
	return id;

def list_gear():
	cur = db().cursor()
	print "Batteries"
	for row in cur.execute('SELECT * FROM battery'):
		print '   id:',row[0],' name:', row[1]
	print "Models"
	for row in cur.execute('SELECT * FROM model'):
		print '   id:',row[0],' name:', row[1]

def import_data():
	# Fetch base from db
	cur = db().cursor()
	cur.execute("SELECT value FROM variable WHERE name='mountpoint'")
	base = cur.fetchone()
	if base == None:
		if len(sys.argv) == 0:
			usage()
			return
	else:
		base = base[0]

	# FEtch from commandline update db
	if len(sys.argv) > 0:
		base = os.path.abspath(sys.argv.pop(0))
		cur = db().cursor()
		cur.execute("REPLACE INTO variable (name, value) VALUES ('mountpoint',?)", [base])
		db().commit();

	batteryPath = base + '/battery';
	if not os.path.isdir(batteryPath):
		print "VControl path not found, mounted?"
		exit(1)

	print 'Importing data from: ', base

	batteryDirs = [ os.path.join(batteryPath,f) for f in os.listdir(batteryPath) if os.path.isdir(os.path.join(batteryPath,f)) and os.path.exists(os.path.join(batteryPath, f, 'name')) ]
	for d in batteryDirs:
		name = open(os.path.join(d, 'name')).read(255).strip()
		batteryid = get_battery_id(name)
		with open(os.path.join(d, 'log.csv')) as f:
			lines = f.readlines()
		lines = [x.strip('\n') for x in lines] 	

		for line in lines:
			cols = line.split(';')

			date = cols.pop(0)
			date = time.strftime('%Y-%m-%d %H:%M:%S', time.strptime(date,'%Y-%m-%d %H:%M:%S'))
			capacity = cols.pop(0)
			used = cols.pop(0)
			duration = cols.pop(0)
			minvoltage = cols.pop(0)
			maxampere = cols.pop(0)
			uid = cols.pop(0)
			model = cols.pop(0)
			modelid = get_model_id(model)

			cur = db().cursor()
			cur.execute('SELECT id FROM batterylog WHERE batteryid=? and date=?', [batteryid, date])
			rs = cur.fetchone()
			if rs == None:
				print "Importing row battery",name,"with model", model 
				cur = db().cursor()
				cur.execute('INSERT INTO batterylog (date, batteryid, modelid, duration, capacity, used, minvoltage, maxampere, uid) VALUES (?,?,?,?,?,?,?,?,?)',
				 	[date, batteryid, modelid, duration, capacity, used, minvoltage, maxampere, uid])
				db().commit()


def extract():
	batteryid = None
	modelid = None
	start = None
	end = None

	while len(sys.argv) > 0:
		ar = sys.argv.pop(0).split('=', 1)

		if ar[0] == 'battery':
			if len(ar) != 2:
				print "Unkown battery"
				exit(1);
			batteryid = int(ar[1])

		elif ar[0] == 'model':
			if len(ar) != 2:
				print "Unkown model"
				exit(1);
			modelid = int(ar[1])

		elif ar[0] == 'start':
			if len(ar) != 2:
				print "Unkown start"
				exit(1);
			start = ar[1]

		elif ar[0] == 'end':
			if len(ar) != 2:
				print "Unknown end"
				exit(1);
			end = ar[1]

		else:
			print "Unkown extract parameter:",ar[0]
			exit(1);

	sql = "\
		SELECT l.id, b.name as batteryname, m.name as modelname, l.date, l.duration, l.capacity, l.used, l.minvoltage, l.maxampere, l.uid \
		FROM batterylog l \
		LEFT JOIN battery b on b.id=l.batteryid \
		LEFT JOIN model m on m.id=l.modelid \
		WHERE l.used * 4 > l.capacity ORDER by date"
	if batteryid != None:
		sql += " AND l.batteryid=" + str(batteryid)
	if modelid != None:
		sql += " AND l.modelid=" + str(modelid)
	if start != None:
		sql += " AND l.date >= '" + str(start) + "'"
	if end != None:
		sql += " AND l.date < '" + str(end) + "'"

	header  = "+-------+---------------------+---------------------+---------------------+----------+----------+-------------+-------+-------+-------+"
	header2 = "+-------------------------------------------------------------------------------------------------------------------------------------+"

	print header
	print "| Id    | Date                | Battery             | Model               | Duration | Capacity | Used        | MinV  | MaxA  | IdleV |" 
	print header
	cur = db().cursor()
	cycles = 0
	capacityused = 0;
	flighttime = 0
	for row in cur.execute(sql):
		capacityused += row[6];
		cycles += 1
		duration = "{0:02d}:{1:02d}".format(int(row[4] / 60), int(row[4] % 60))
		flighttime += row[4]
		used = str(row[6]) + ' (' + str(int(float(row[6]) / row[5] * 100)) + '%)'

		row = "| {:<6}| {:<20}| {:<20}| {:<20}| {:<9}| {:<9}| {:<12}| {:<6}| {:<6}| {:<6}|".format(row[0],row[3],row[1],row[2], duration,row[5],used, row[7], row[8], row[9])
		print row

	capacityused = round(float(capacityused) / 1000, 2)
	t = "{0:02d}:{1:02d}:{2:02d}".format(int(flighttime / 3600), int((flighttime % 3600) / 60), int(flighttime % 60))
	print header
	print "| Cycles: {0:<19} | Capacity used: {1:<26} | Duration: {2:<47} |".format(cycles, str(capacityused) + "Ah", t)
	print header2


# Main start
def main():
	if len(sys.argv) == 1:
		usage()
		exit(1);

	# Shift progmran name
	sys.argv.pop(0)

	command = sys.argv.pop(0)
	if command == '--import':
		import_data()
	elif command == '--list':
		list_gear()
	elif command == '--extract':
		extract()
	else:
		usage()
		exit(1)

main()